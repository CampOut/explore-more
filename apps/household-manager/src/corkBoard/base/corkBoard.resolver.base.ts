/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCorkBoardArgs } from "./CreateCorkBoardArgs";
import { UpdateCorkBoardArgs } from "./UpdateCorkBoardArgs";
import { DeleteCorkBoardArgs } from "./DeleteCorkBoardArgs";
import { CorkBoardFindManyArgs } from "./CorkBoardFindManyArgs";
import { CorkBoardFindUniqueArgs } from "./CorkBoardFindUniqueArgs";
import { CorkBoard } from "./CorkBoard";
import { ThreadFindManyArgs } from "../../thread/base/ThreadFindManyArgs";
import { Thread } from "../../thread/base/Thread";
import { User } from "../../user/base/User";
import { Household } from "../../household/base/Household";
import { CorkBoardService } from "../corkBoard.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CorkBoard)
export class CorkBoardResolverBase {
  constructor(
    protected readonly service: CorkBoardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CorkBoard",
    action: "read",
    possession: "any",
  })
  async _corkBoardsMeta(
    @graphql.Args() args: CorkBoardFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CorkBoard])
  @nestAccessControl.UseRoles({
    resource: "CorkBoard",
    action: "read",
    possession: "any",
  })
  async corkBoards(
    @graphql.Args() args: CorkBoardFindManyArgs
  ): Promise<CorkBoard[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CorkBoard, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CorkBoard",
    action: "read",
    possession: "own",
  })
  async corkBoard(
    @graphql.Args() args: CorkBoardFindUniqueArgs
  ): Promise<CorkBoard | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CorkBoard)
  @nestAccessControl.UseRoles({
    resource: "CorkBoard",
    action: "create",
    possession: "any",
  })
  async createCorkBoard(
    @graphql.Args() args: CreateCorkBoardArgs
  ): Promise<CorkBoard> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        createdBy: args.data.createdBy
          ? {
              connect: args.data.createdBy,
            }
          : undefined,

        household: {
          connect: args.data.household,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CorkBoard)
  @nestAccessControl.UseRoles({
    resource: "CorkBoard",
    action: "update",
    possession: "any",
  })
  async updateCorkBoard(
    @graphql.Args() args: UpdateCorkBoardArgs
  ): Promise<CorkBoard | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          createdBy: args.data.createdBy
            ? {
                connect: args.data.createdBy,
              }
            : undefined,

          household: {
            connect: args.data.household,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CorkBoard)
  @nestAccessControl.UseRoles({
    resource: "CorkBoard",
    action: "delete",
    possession: "any",
  })
  async deleteCorkBoard(
    @graphql.Args() args: DeleteCorkBoardArgs
  ): Promise<CorkBoard | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Thread])
  @nestAccessControl.UseRoles({
    resource: "Thread",
    action: "read",
    possession: "any",
  })
  async threads(
    @graphql.Parent() parent: CorkBoard,
    @graphql.Args() args: ThreadFindManyArgs
  ): Promise<Thread[]> {
    const results = await this.service.findThreads(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async createdBy(@graphql.Parent() parent: CorkBoard): Promise<User | null> {
    const result = await this.service.getCreatedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Household, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Household",
    action: "read",
    possession: "any",
  })
  async household(
    @graphql.Parent() parent: CorkBoard
  ): Promise<Household | null> {
    const result = await this.service.getHousehold(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
